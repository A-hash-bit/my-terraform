Terraform defines several meta-arguments, which can be used with ayy resource type to change the behaviour of resources.
1. depends_on - for specifying explicit dependancy.
   - order of which resources are provisioned is imp. if depends on other. terraform determine the order implicitly but in some cases it can't.
  e.g.- resource "aws_iam_role_policy" "example"{
        name = "example"
        role = aws_iam_role.example.name
       }
        resourc "aws_instance" "example" {
         ami = "ami-28fhddfv"
         instance_type - "t2.micro"
         depends_on = [
           aws_iam_role_policy.example,
         ]
        }

2. count - for creating multiple resource instances according to count.
   resource "aws_instance" "server" {
      count = 4    --create 4 similar ec2 instances
      ami = "ami-3266t2eb"
      instance_type = "t2.micro"

      tags = {
        Name = "server ${count.index}"  # count.index will give current cpuont value i.e. 0,1,2,3
      }
   }
  * count can accept numerical value or expression (count = lenght(var.subnet_ids))

3. for_each - to create multiple instances acording to map or set of strings
  e.g. 1 resource "azurerm_resource_group" "rg" {
       for_each = {               ---- ---( * we define map/set with for_each and acces its key/value)
         a_group = "eastus"
         amother_group = "westus2"
       }
      name = each.key
      location = each.value
   }
e.g. 2
 resource "aws_iam_user "accounts" {
     # from array to set
     for_each = toset(["Todd", "Alice", "James"])    ---( * we define map/set with for_each and acces its key/value)
     name = each.key
   }
 
4. provider - for selecting non-default provider configuration.
5. lifecycle - for lifecycle customisation
provisionrs and connection - for taking extra actions after resource creation.
